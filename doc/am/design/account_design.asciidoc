= 账号管理设计
陈小龙 <34814491@qq.com>
v1.0, 2015-9-19
:library: Asciidoctor
:imagesdir: images
:lang: zh-cmn-Hans
:doctype: article
:description:
:icons: font
:source-highlighter: highlightjs
:linkcss!:
:numbered:
:idprefix:
:toc: right
:toclevels: 3
:experimental:

:numbered!:

[abstract]

要求
--
. 注册登录
. 手机注册，短信验证码
. 账号等级
. 账号信息暂时用二进制存在本地文件中
--

:numbered:
== 总述

=== 功能

--
. 创建账户
. 验证账户
. 登录账户
. 用户查询
. 修改呢称
. 修改密码
. 修改等级
--

=== 基本设计

Resend random code works the same as create account, thus resend request is just the create request.

服务器维护一个已登录用户的链表，链表单元的基本字段有id, username, passwd, tel, grade等，除此之外，还包括client的struct sockaddr，作为用户请求的验证信息(是否来自有效源)。

用户手机注册并验证通过后，服务器自动分配username和passwd，发送给用户，并将用户设为已登录状态(置入已登录链表)。
用户名可重复，手机号和邮箱不可重复。

=== 账号

[source,c]
.账号结构
----
#define UNLOG_USER_GRADE 0xFFFF

struct account {
    uint8_t grade;
    uint32_t id;
    char username[64];
    char tel[16];
    char passwd[16];
};
----

=== 用户请求过程

用户要完成一次请求，需要执行三次操作，如<<three_request,请求三次操作>>所示。

[[tree_request]]
.完成请求所需三次操作
image::three_request.svg[图片无法显示，请参考./images/three_request.svg, align="center"]

=== 操作原型

reply和react函数原型一样。

[source,c]
.reply和react操作原型
----
#define __in
#define __out
#define __inout

typedef int processfunc(char* inmsg, int inmsglen, char* outmsg, __inout outmsglen);
----

=== 请求

请求消息结构如<<request data structure, 请求消息结构>>所示。

[[rs]]
.request data structure
image::request_structure.svg[图片无法显示，请参考./images/request_structure.svg, align="center"]

=== 短信验证

生成验证码不难，生成随机数据即可。但不知如何发送短信。

== 详细设计

=== 创建账户

用户通过手机验证创建账户。

=== 验证账户

=== 登录账户
=== 用户查询
=== 修改呢称
=== 修改密码
=== 修改等级
