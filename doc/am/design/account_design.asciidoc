= 账号管理设计
陈小龙 <34814491@qq.com>
v1.0, 2015-9-19
:library: Asciidoctor
:imagesdir: images
:lang: zh-cmn-Hans
:doctype: article
:description:
:icons: font
:source-highlighter: highlightjs
:linkcss!:
:numbered:
:idprefix:
:toc: right
:toclevels: 3
:experimental:

:numbered!:

[abstract]

要求
--
. 手机注册，短信验证码
. 账号信息暂时用二进制存在本地文件中
--

:numbered:

== 总述

=== 功能

--
. 创建账户
. 验证账户
. 登录账户
. 用户查询
. 修改昵称
. 修改密码
. 修改等级
--

=== 基本设计

用户要完成一次请求，需要执行三次操作，如<<three_request,请求三次操作>>所示。

[[tree_request]]
.完成请求所需三次操作
  ,------.          ,------.
  |client|          |server|
  `--+---'          `--+---'
     |      request    |
     | ---------------->
     |                 |
     |       reply     |
     | <- - - - - - - -
     |                 |
     |----.            |
     |    | react      |
     |<---'            |
  ,--+---.          ,--+---.
  |client|          |server|
  `------'          `------'


reply和react函数原型一样。

[source,c]
.reply和react操作原型
----
#define __in
#define __out
#define __inout

typedef int processfunc(char* inmsg, int inmsglen, char* outmsg, __inout outmsglen);
----


请求消息结构如<<message data structure, 请求消息结构>>所示。

[[rs]]
.message data structure
---------------------------------------------
| process id | user id | message data | ... |
---------------------------------------------

--
. process id 用于查找对应的处理函数，用于处理message。
. user id 用于验证用户是否有效。
. message data 通信数据。
--

=== 数据结构

==== 服务器

基本账户结构如<<account_data_t,账户结构体>>所示。

[source,c]
.account_data_t
----
#define UNLOG_USER_GRADE 0xFFFF

struct account_data_t {
    uint8_t grade;
    uint32_t id;        /**< unique */
    char usernum[12];   /**< unique */
    char tel[16];       /**< unique */
    char username[64];
    char passwd[16];
};
----

服务器维护一个已登录用户的链表(login list)，链表单元的基本字段有id, username, passwd, tel, grade等，
还包括client的struct sockaddr，作为用户请求的验证信息(是否来自有效源)。
login list用于快速查找已登录用户和保存最新的账号信息(比如用户已修改过用户名)。

服务器还需要维护一个临时账号链表(temporary list)，临时账号字段比较简单，仅有usernum, tel, random code和创建时间。
临时账号只在注册用户时起作用。超过固定时间(120s)或账号验证成功后，临时账号将被移除链表。

==== 客户端

客户端将维护一个登录账号数据结构，用于客户端做一些输入限制等。

客户端同时要维护一个临时账号数据结构，用于记忆上次请求数据。比如修改昵称，可记忆要修改的名字，如果
服务器返回succeed，则将临时账号内的昵称复制到登录账号中。

== 详细设计

=== 创建账户

创建账户过程如图所示：


                ,------.                         ,------.
                |client|                         |server|
                `--+---'                         `--+---'
                   | create request(qq, tel, passwd)|  ,-------------------------------!.
                   | ------------------------------->  |这里直接发送密码安全吗？       |_\
                   |                                |  |好像没看到其他软件注册发密码     |
                   |                                |  `---------------------------------'
                   |                                |----.
                   |                                |    | 查看tel是否已注册
                   |                                |<---'
                   |                                |
                   |                                |
      ____________________________________________________________________________
      ! ALT  /  tel 已经注册                        |                             !
      !_____/      |                                |                             !
      !            |           invalid tel          |                             !
      !            | <- - - - - - - - - - - - - - - -                             !
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
      ! [tel 未注册]                                |                             !
      !            |                                |----.                        !
      !            |                                |    | set user number(qq)    !
      !            |                                |<---'                        !
      !            |                                |                             !
      !            |                                |----.                        !
      !            |                                |    | 生成发送验证码         !
      !            |                                |<---'                        !
      !            |                                |                             !
      !            |                                |----.                        !
      !            |                                |    | 生成临时账号           !
      !            |                                |<---'                        !
      !            |                                |                             !
      !            |         account created        |                             !
      !            | <- - - - - - - - - - - - - - - -                             !
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
                ,--+---.                         ,--+---.
                |client|                         |server|
                `------'                         `------'

我担心发送创建账户请求时，如果第三方截获了数据怎么办？好像看到其他的注册都是服务器生成的密码，
然后让用户立即修改密码。

=== 验证账户

验证通过后，服务器自动分配username和passwd，发送给用户，并将用户设为已登录状态(置入已登录链表)。
然后从临时用户链表中移除所有此手机号注册的账户。

=== 登录账户

登录账户采用"usernum + passwd", "tel + passwd"的方式。

如果此前已有相同账号在登录链表里，服务器会通知当前登录客户端。(已实现)

需要提醒此前已登录的账号，又有一个账号登录了吗？因为之前的实现都是基于“客户端-->服务器-->客户端”的
模式，如果服务器主动给客户端发消息，还没有想好怎么做。

=== 退出账户

退出账户后，服务器会将login list中账户更新到file中，然后删除账户。

=== 用户查询

查询操作还没实现。但想法是查询的数据都放在客户端，用户登录时便把这些数据传过来保存下来，查询时，数据只
在客户端，不再流向服务器。

=== 修改昵称

修改昵称与修改密码和修改等级操作相似。

客户端发送

-----------------------------------------
| user id | passwd | new username | ... |
-----------------------------------------

到服务器，同时记录new username到客户端临时账号中。若服务器验证通过，则将临时账号中的数据复制到登录账号中。

=== 修改密码


=== 修改等级

=== 其他

重新发送创建账户的请求与创建账户请求接口完全相同。
